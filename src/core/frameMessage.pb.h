// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameMessage_2eproto {
  static const uint32_t offsets[];
};
namespace tutorial {
class FrameMessage;
struct FrameMessageDefaultTypeInternal;
extern FrameMessageDefaultTypeInternal _FrameMessage_default_instance_;
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> ::tutorial::FrameMessage* Arena::CreateMaybeMessage<::tutorial::FrameMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tutorial {

// ===================================================================

class FrameMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:tutorial.FrameMessage) */ {
 public:
  inline FrameMessage() : FrameMessage(nullptr) {}
  ~FrameMessage() override;
  explicit PROTOBUF_CONSTEXPR FrameMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameMessage(const FrameMessage& from);
  FrameMessage(FrameMessage&& from) noexcept
    : FrameMessage() {
    *this = ::std::move(from);
  }

  inline FrameMessage& operator=(const FrameMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameMessage& operator=(FrameMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FrameMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameMessage* internal_default_instance() {
    return reinterpret_cast<const FrameMessage*>(
               &_FrameMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FrameMessage& a, FrameMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FrameMessage& from);
  void MergeFrom(const FrameMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FrameMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.FrameMessage";
  }
  protected:
  explicit FrameMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 4,
    kControlFieldNumber = 7,
    kTimeFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kFrameIdFieldNumber = 5,
    kPtrFieldNumber = 6,
  };
  // string format = 4;
  void clear_format();
  const std::string& format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_format();
  PROTOBUF_NODISCARD std::string* release_format();
  void set_allocated_format(std::string* format);
  private:
  const std::string& _internal_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // string control = 7;
  void clear_control();
  const std::string& control() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_control(ArgT0&& arg0, ArgT... args);
  std::string* mutable_control();
  PROTOBUF_NODISCARD std::string* release_control();
  void set_allocated_control(std::string* control);
  private:
  const std::string& _internal_control() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_control(const std::string& value);
  std::string* _internal_mutable_control();
  public:

  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // int32 width = 2;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 3;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // int64 frameId = 5;
  void clear_frameid();
  int64_t frameid() const;
  void set_frameid(int64_t value);
  private:
  int64_t _internal_frameid() const;
  void _internal_set_frameid(int64_t value);
  public:

  // uint64 ptr = 6;
  void clear_ptr();
  uint64_t ptr() const;
  void set_ptr(uint64_t value);
  private:
  uint64_t _internal_ptr() const;
  void _internal_set_ptr(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.FrameMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr control_;
    int64_t time_;
    int32_t width_;
    int32_t height_;
    int64_t frameid_;
    uint64_t ptr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frameMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FrameMessage

// int64 time = 1;
inline void FrameMessage::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t FrameMessage::_internal_time() const {
  return _impl_.time_;
}
inline int64_t FrameMessage::time() const {
  // @@protoc_insertion_point(field_get:tutorial.FrameMessage.time)
  return _internal_time();
}
inline void FrameMessage::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void FrameMessage::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:tutorial.FrameMessage.time)
}

// int32 width = 2;
inline void FrameMessage::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t FrameMessage::_internal_width() const {
  return _impl_.width_;
}
inline int32_t FrameMessage::width() const {
  // @@protoc_insertion_point(field_get:tutorial.FrameMessage.width)
  return _internal_width();
}
inline void FrameMessage::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void FrameMessage::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:tutorial.FrameMessage.width)
}

// int32 height = 3;
inline void FrameMessage::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t FrameMessage::_internal_height() const {
  return _impl_.height_;
}
inline int32_t FrameMessage::height() const {
  // @@protoc_insertion_point(field_get:tutorial.FrameMessage.height)
  return _internal_height();
}
inline void FrameMessage::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void FrameMessage::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tutorial.FrameMessage.height)
}

// string format = 4;
inline void FrameMessage::clear_format() {
  _impl_.format_.ClearToEmpty();
}
inline const std::string& FrameMessage::format() const {
  // @@protoc_insertion_point(field_get:tutorial.FrameMessage.format)
  return _internal_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FrameMessage::set_format(ArgT0&& arg0, ArgT... args) {
 
 _impl_.format_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.FrameMessage.format)
}
inline std::string* FrameMessage::mutable_format() {
  std::string* _s = _internal_mutable_format();
  // @@protoc_insertion_point(field_mutable:tutorial.FrameMessage.format)
  return _s;
}
inline const std::string& FrameMessage::_internal_format() const {
  return _impl_.format_.Get();
}
inline void FrameMessage::_internal_set_format(const std::string& value) {
  
  _impl_.format_.Set(value, GetArenaForAllocation());
}
inline std::string* FrameMessage::_internal_mutable_format() {
  
  return _impl_.format_.Mutable(GetArenaForAllocation());
}
inline std::string* FrameMessage::release_format() {
  // @@protoc_insertion_point(field_release:tutorial.FrameMessage.format)
  return _impl_.format_.Release();
}
inline void FrameMessage::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    
  } else {
    
  }
  _impl_.format_.SetAllocated(format, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.format_.IsDefault()) {
    _impl_.format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.FrameMessage.format)
}

// int64 frameId = 5;
inline void FrameMessage::clear_frameid() {
  _impl_.frameid_ = int64_t{0};
}
inline int64_t FrameMessage::_internal_frameid() const {
  return _impl_.frameid_;
}
inline int64_t FrameMessage::frameid() const {
  // @@protoc_insertion_point(field_get:tutorial.FrameMessage.frameId)
  return _internal_frameid();
}
inline void FrameMessage::_internal_set_frameid(int64_t value) {
  
  _impl_.frameid_ = value;
}
inline void FrameMessage::set_frameid(int64_t value) {
  _internal_set_frameid(value);
  // @@protoc_insertion_point(field_set:tutorial.FrameMessage.frameId)
}

// uint64 ptr = 6;
inline void FrameMessage::clear_ptr() {
  _impl_.ptr_ = uint64_t{0u};
}
inline uint64_t FrameMessage::_internal_ptr() const {
  return _impl_.ptr_;
}
inline uint64_t FrameMessage::ptr() const {
  // @@protoc_insertion_point(field_get:tutorial.FrameMessage.ptr)
  return _internal_ptr();
}
inline void FrameMessage::_internal_set_ptr(uint64_t value) {
  
  _impl_.ptr_ = value;
}
inline void FrameMessage::set_ptr(uint64_t value) {
  _internal_set_ptr(value);
  // @@protoc_insertion_point(field_set:tutorial.FrameMessage.ptr)
}

// string control = 7;
inline void FrameMessage::clear_control() {
  _impl_.control_.ClearToEmpty();
}
inline const std::string& FrameMessage::control() const {
  // @@protoc_insertion_point(field_get:tutorial.FrameMessage.control)
  return _internal_control();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FrameMessage::set_control(ArgT0&& arg0, ArgT... args) {
 
 _impl_.control_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.FrameMessage.control)
}
inline std::string* FrameMessage::mutable_control() {
  std::string* _s = _internal_mutable_control();
  // @@protoc_insertion_point(field_mutable:tutorial.FrameMessage.control)
  return _s;
}
inline const std::string& FrameMessage::_internal_control() const {
  return _impl_.control_.Get();
}
inline void FrameMessage::_internal_set_control(const std::string& value) {
  
  _impl_.control_.Set(value, GetArenaForAllocation());
}
inline std::string* FrameMessage::_internal_mutable_control() {
  
  return _impl_.control_.Mutable(GetArenaForAllocation());
}
inline std::string* FrameMessage::release_control() {
  // @@protoc_insertion_point(field_release:tutorial.FrameMessage.control)
  return _impl_.control_.Release();
}
inline void FrameMessage::set_allocated_control(std::string* control) {
  if (control != nullptr) {
    
  } else {
    
  }
  _impl_.control_.SetAllocated(control, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.control_.IsDefault()) {
    _impl_.control_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.FrameMessage.control)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameMessage_2eproto
