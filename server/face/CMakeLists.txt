CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
PROJECT(FaceService LANGUAGES C CXX)

LOAD_FAISS()
LOAD_OPENMP()
LOAD_OPENBLAS()

LINK_DIRECTORIES(
  ${OpenCV_LIBRARY_DIR}
)

FILE(GLOB_RECURSE FACE_SERVER_LIB_HEAD ${CMAKE_CURRENT_SOURCE_DIR}/*.hpp ${CMAKE_CURRENT_SOURCE_DIR}/*.h)
FILE(GLOB_RECURSE FACE_SERVER_LIB_SRC ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)

ADD_LIBRARY(face_server ${FACE_SERVER_LIB_SRC})
TARGET_INCLUDE_DIRECTORIES(face_server PRIVATE
  ${PROJECT_INCLUDE_DIR}
  ${PROJECT_INCLUDE_DIR}/core
  ${PROJECT_INCLUDE_DIR}/video
  ${PROJECT_INCLUDE_DIR}/jetson-utils
  ${PROJECT_INCLUDE_DIR}/infer
  ${PROJECT_INCLUDE_DIR}/infer/jetson
  ${PROJECT_INCLUDE_DIR}/infer/x3
  ${PROJECT_INCLUDE_DIR}/server/face
  ${OpenCV_INCLUDE_DIRS}
  ${FAISS_INCLUDE_DIR}
  ${CURL_INCLUDE_DIR}
)

TARGET_LINK_LIBRARIES(face_server infer video core module_logger stdc++fs ${FAISS_LIBRARIES} ${OpenCV_LIBS} ${CURL_LIBRARIES})

# transfer all headers to the include directory
FILE(MAKE_DIRECTORY ${PROJECT_INCLUDE_DIR}/server/face)
FOREACH(include ${FACE_SERVER_LIB_HEAD})
  MESSAGE("-- Copying ${include}")
  CONFIGURE_FILE(${include} ${PROJECT_INCLUDE_DIR}/server/face COPYONLY)
ENDFOREACH()

FILE(MAKE_DIRECTORY ${PROJECT_OUTPUT_DIR}/bin/app)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_OUTPUT_DIR}/bin/app)
FILE(GLOB APP_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/*.cc)
MESSAGE(STATUS "APP SOURCES: ${APP_SOURCES}")
FOREACH(sourcefile ${APP_SOURCES})
    STRING(REGEX MATCH "[^/]+$" sourcefilewithoutpath ${sourcefile})
    STRING(REPLACE ".cc" "" testname ${sourcefilewithoutpath})
    ADD_EXECUTABLE( ${testname} ${sourcefile})

    TARGET_INCLUDE_DIRECTORIES(${testname} PRIVATE
      ${PROJECT_INCLUDE_DIR}
      ${PROJECT_INCLUDE_DIR}/core
      ${PROJECT_INCLUDE_DIR}/video
      ${PROJECT_INCLUDE_DIR}/jetson-utils
      ${PROJECT_INCLUDE_DIR}/infer
      ${PROJECT_INCLUDE_DIR}/infer/jetson
      ${PROJECT_INCLUDE_DIR}/infer/x3
      ${PROJECT_INCLUDE_DIR}/server/face
      ${OpenCV_INCLUDE_DIRS}
      ${FAISS_INCLUDE_DIR}
      ${CURL_INCLUDE_DIR}
    )

    TARGET_LINK_LIBRARIES(${testname} face_server infer video core module_logger stdc++fs ${FAISS_LIBRARIES} ${BLAS_LIBRARIES} ${FFMPEG_LIBS} ${OpenCV_LIBS} ${CURL_LIBRARIES})

    INSTALL(TARGETS ${testname}
        ARCHIVE DESTINATION lib
        LIBRARY DESTINATION lib
        RUNTIME DESTINATION bin)
ENDFOREACH(sourcefile ${APP_SOURCES})
